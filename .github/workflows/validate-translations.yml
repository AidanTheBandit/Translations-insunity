name: Validate Translations

on:
  pull_request:
    paths:
      - 'translations/**.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get changed files
      id: changed-files
      run: |
        echo "CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep '^translations/.*\.json$' | cut -d'/' -f2 | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_ENV
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Validate translations
      run: node scripts/validate.js
        
    - name: Add PR comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
          
          let comment = '## Translation Validation Results\n\n';
          
          if (results.valid) {
            comment += '✅ All checks passed!\n\n';
            comment += '- Valid JSON format\n';
            comment += '- All required translations present\n';
            comment += '- No extra translations\n';
          } else {
            comment += '❌ Validation failed\n\n';
            comment += '### Issues found:\n\n';
            results.errors.forEach(error => {
              comment += `${error}\n\n`;
            });
            
            comment += '\n### Common fixes:\n';
            comment += '1. Use double quotes (") not single quotes (')\n';
            comment += '2. Remove trailing commas\n';
            comment += '3. Make sure all property names and values are in double quotes\n';
            comment += '4. Check that all opening brackets/braces have matching closing ones\n';
            comment += '5. Ensure commas between properties but not after the last one\n\n';
            comment += 'Example of valid JSON:\n```json\n{\n  "key": "value",\n  "another": "translation"\n}\n```';
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });